{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSQL_emptable",
						"type": "DatasetReference"
					},
					"name": "EmployeeDataset"
				},
				{
					"dataset": {
						"referenceName": "DS_AzureSql_departmenttable",
						"type": "DatasetReference"
					},
					"name": "Departmenttable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_adfcontainer_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          HireDate as date,",
				"          DepartmentID as integer,",
				"          Salary as decimal(10,2),",
				"          MANAGERID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EmployeeDataset",
				"source(output(",
				"          DepartmentID as integer,",
				"          DepartmentName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Departmenttable",
				"EmployeeDataset, Departmenttable join(EmployeeDataset@DepartmentID == Departmenttable@DepartmentID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          EmployeeID,",
				"          FirstName,",
				"          LastName,",
				"          Email,",
				"          PhoneNumber,",
				"          HireDate,",
				"          DepartmentID = EmployeeDataset@DepartmentID,",
				"          Salary,",
				"          MANAGERID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}